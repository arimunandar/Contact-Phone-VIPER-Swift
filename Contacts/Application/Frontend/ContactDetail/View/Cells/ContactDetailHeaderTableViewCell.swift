//
//  ContactDetailHeaderTableViewCell.swift
//  Contacts
//
//  Created by Ari Munandar on 4/25/17.
//  Copyright (c) 2017 Ari Munandar. All rights reserved.
//
//  This file was generated by the Devcast Studio XCode Templates
//	Name		: Ari Muandnar
//	E-Mail		: arimunandar.dev@gmail.com
// 	Instagram	: _arymunandar_
// 	Youtube		: https://www.youtube.com/channel/UC7jr8DR06tcVR0QKKl6cSNA
//

import UIKit
import EasyPeasy

class ContactDetailHeaderTableViewCell: BaseTableCell {

    // MARK - Initial Image View
    var profileImage: UIImageView = {
        let img = UIImageView()
        img.image = UIImage(named: Icons.GENERAL_NO_IMAGE)?.withRenderingMode(.alwaysOriginal)
        img.tintColor = Colors.DARK_GREY
        img.contentMode = .scaleAspectFit
        img.clipsToBounds = true
        img.layer.borderColor = Colors.WHITE.cgColor
        img.layer.borderWidth = 3
        img.layer.cornerRadius = (Sizes.WIDTH - (127 * 2)) / 2
        img.translatesAutoresizingMaskIntoConstraints = false
        return img
    }()

    // MARK - Initial Label
    var nameLabel: UILabel = {
        let label = UILabel()
        label.text = NSLocalizedString("", comment: "")
        label.textColor = Colors.DARK_GREY
        label.backgroundColor = Colors.CLEAR
        label.font = UIFont(name: "SanFranciscoText-Bold", size: FontSize.EXTRA_LARGE)
        label.textAlignment = .center
        label.numberOfLines = 0
        label.lineBreakMode = .byWordWrapping
        label.sizeToFit()
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()

    lazy var collectionView: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .horizontal
        layout.minimumLineSpacing = 0
        layout.minimumInteritemSpacing = 0
        layout.sectionInset = UIEdgeInsets(top: 0, left: 26, bottom: 0, right: 26)

        let cv = UICollectionView(frame: .zero, collectionViewLayout: layout)
        cv.backgroundColor = Colors.CLEAR
        cv.dataSource = self
        cv.delegate = self
        cv.isPagingEnabled = false
        cv.register(ContactDetailCollectionViewCell.self, forCellWithReuseIdentifier: "Cell")
        return cv
    }()

    var setProfileImage: String? {
        didSet {
            guard let value = setProfileImage else {
                return
            }

            let url = URL(string: "\(Route.baseUrl)/\(value)")
            self.profileImage.kf.setImage(with: url)
        }
    }

    var setName: String? {
        didSet {
            guard let value = setName else {
                return
            }

            self.nameLabel.text = value
        }
    }

    var id: Int = 0
    var setId: Int? {
        didSet {
            guard let id = setId else {
                return
            }
            self.id = id
            self.collectionView.reloadData()
        }
    }

    var mobile: String = ""
    var setMobile: String? {
        didSet {
            guard let mobile = setMobile else {
                return
            }
            self.mobile = mobile
            self.collectionView.reloadData()
        }
    }

    var email: String = ""
    var setEmail: String? {
        didSet {
            guard let email = setEmail else {
                return
            }
            self.email = email
            self.collectionView.reloadData()
        }
    }

    var isFavorite: Bool = false
    var setFavorite: Bool? {
        didSet {
            guard let value = setFavorite else {
                return
            }

            self.isFavorite = value
            self.collectionView.reloadData()
        }
    }

    var menuData: [String] = ["message", "call", "email", "favorite"]
    var menuIconData: [String] = ["Speech Bubble", "Phone", "Message", "Star-1"]

    var gradientView: GradientView = {
        let view = GradientView()
        view.colors = [Colors.WHITE, Colors.LIGHT_GREEN]
        return view
    }()

    // MARK - Setup Selection Cell
    override var isSelected: Bool {
        didSet {
            if isSelected {
                // Do someting...
            } else {
                // Do someting...
            }
        }
    }

    // MARK - Lifecycle
    override func setupViews() {
        super.setupViews()

        // MARK - Call Setup Cell properties
        setupProperties()

        // MARK - Call Setup Cell function
        setupComponent()

        // MARK - Call Setup Cell Frame
        setupFrame()

    }

}

// MARK - Setup Component View
extension ContactDetailHeaderTableViewCell {

    // MARK: - Setup Cell Properties
    func setupProperties() {
        self.setupGeneral(bgColor: Colors.LIGHT_GREY)
    }

    // MARK - Setup Cell Component
    func setupComponent() {
        self.addSubview(self.gradientView)
        self.addSubview(self.profileImage)
        self.addSubview(self.nameLabel)
        self.addSubview(self.collectionView)
    }

    // MARK - Setup Cell frame
    func setupFrame() {
        self.gradientView <- [
            Top(),
            Left(),
            Right(),
            Bottom()
        ]

        self.profileImage <- [
            CenterX(),
            Top(Sizes._20),
            Size(Sizes.WIDTH - (127 * 2))
        ]

        self.nameLabel <- [
            Top(Padding._8).to(self.profileImage),
            Left(Padding._16),
            Right(Padding._16)
        ]

        self.collectionView <- [
            Top(Padding._12).to(self.nameLabel),
            CenterX(),
            Width(Sizes.WIDTH),
            Height((Sizes.WIDTH / 4)),
            Bottom()
        ]

    }

}

extension ContactDetailHeaderTableViewCell: UICollectionViewDelegate, UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: 80.75, height: (Sizes.WIDTH - 100) / 4)
    }
}

extension ContactDetailHeaderTableViewCell: UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return self.menuData.count
    }

    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "Cell", for: indexPath) as! ContactDetailCollectionViewCell
        cell.setMenuName = self.menuData[indexPath.item]
        cell.setMenuIcon = self.menuIconData[indexPath.item]
        cell.setTag = indexPath.item
        cell.setMobile = self.mobile
        cell.setEmail = self.email
        cell.setId = self.id
        switch indexPath.item {
        case 3:
            if isFavorite {
                cell.menuButton.backgroundColor = Colors.GREEN
                cell.menuButton.tintColor = Colors.WHITE
            } else {
                cell.menuButton.backgroundColor = Colors.WHITE
                cell.menuButton.tintColor = Colors.MID_GREY
            }
        default:
            cell.menuButton.backgroundColor = Colors.GREEN
            cell.menuButton.tintColor = Colors.WHITE
        }
        return cell
    }
}
